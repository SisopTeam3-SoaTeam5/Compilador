package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal INIT;
terminal INTEGER;
terminal FLOAT;
terminal STRING;
terminal IF;
terminal ELSE;
terminal WHILE;
terminal WRITE;
terminal READ;
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal FLOAT_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;
terminal GREATER_THAN;
terminal LESS_THAN;
terminal GREATER_OR_EQUAL;
terminal LESS_OR_EQUAL;
terminal NOT_EQUAL;
terminal EQUAL;
terminal NOT;
terminal AND;
terminal OR;
terminal OPEN_BLOCK;
terminal CLOSE_BLOCK;
terminal LINE_TERMINATOR;
terminal COMMA;
terminal SEMICOLON;

// Non Terminals
non terminal sta;
non terminal programa;
non terminal bloque;
non terminal bloquedec;
non terminal declaraciones;
non terminal sentencia;
non terminal linea;
non terminal pregunta;
non terminal loop;
non terminal declaracion;
non terminal list_identifier;
non terminal asignacion;
non terminal escritura;
non terminal lectura;
non terminal type;
non terminal comparacion;
non terminal comparador;
non terminal expression;
non terminal term;
non terminal factor;
non terminal logical;
non terminal condicion;

// Start Symbol Definition
start with sta;

sta ::= programa {: System.out.println("End"); :};
programa ::= bloque {: System.out.println("bloque"); :};
programa ::= bloquedec bloque {: System.out.println("bloque dec"); :};
bloquedec ::= INIT OPEN_BLOCK declaraciones CLOSE_BLOCK {: System.out.println("bloque declaraciones"); :};
declaraciones ::= declaracion {: System.out.println("declaracion"); :};
declaraciones ::= declaraciones declaracion {: System.out.println("declaraciones varias"); :};
bloque ::= sentencia {: System.out.println("sent"); :};
bloque ::= bloque sentencia {: System.out.println("sent"); :};
sentencia ::= linea {: System.out.println("line"); :};
sentencia ::= pregunta {: System.out.println("if"); :};
sentencia ::= loop {: System.out.println("while"); :};
linea ::= asignacion SEMICOLON {: System.out.println(":="); :};
linea ::= escritura SEMICOLON {: System.out.println("write"); :};
linea ::= lectura SEMICOLON {: System.out.println("read"); :};
declaracion ::= list_identifier ASSIG type SEMICOLON {: System.out.println("linea de declaracion"); :};
list_identifier ::= IDENTIFIER{: System.out.println("declaracion simple"); :};
list_identifier ::= IDENTIFIER COMMA list_identifier{: System.out.println("lista declaraciones"); :};
type ::= INTEGER | FLOAT | STRING {: System.out.println("Tipo de dato"); :};
asignacion ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};
escritura ::= WRITE STRING_CONSTANT  {: System.out.println("write string_constant"); :};
escritura ::= WRITE IDENTIFIER  {: System.out.println("write id"); :};
lectura ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("read id"); :};
pregunta ::= IF OPEN_BRACKET condicion CLOSE_BRACKET OPEN_BLOCK programa CLOSE_BLOCK  {: System.out.println("if declaracion"); :};
pregunta ::= IF OPEN_BRACKET condicion CLOSE_BRACKET OPEN_BLOCK programa CLOSE_BLOCK ELSE OPEN_BLOCK programa CLOSE_BLOCK  {: System.out.println("if else declaracion"); :};
loop ::= WHILE OPEN_BRACKET condicion CLOSE_BRACKET OPEN_BLOCK programa CLOSE_BLOCK {: System.out.println("while declaracion"); :};
condicion ::= comparacion {: System.out.println("comparacion simple"); :};
condicion ::= comparacion logical comparacion {: System.out.println("comparacion multiple"); :};
logical ::= AND | OR {: System.out.println("operador logico"); :};
condicion ::= NOT comparacion {: System.out.println("comparacion negada"); :}; //REVISAR ESTA, ESTA RARI
comparacion ::= expression comparador expression {: System.out.println("comparacion"); :};
comparador ::= GREATER_THAN | LESS_THAN | GREATER_OR_EQUAL | LESS_OR_EQUAL | NOT_EQUAL | EQUAL {: System.out.println("comparador"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Integer Constant: " + constant ); :};
factor ::= FLOAT_CONSTANT:constant {: System.out.println("Float Constant: " + constant ); :};
factor ::= STRING_CONSTANT:constant {: System.out.println("String Constant: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Open & Close Brackets"); :};
